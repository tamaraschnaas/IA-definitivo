import numpy as np
import matplotlib.pyplot as plt

# Simulation parameters
T = 50  # tiempo en unidades (p.ej., meses)
time = np.arange(T)

# Parámetros de degradación y regeneración
deg_rate = 1.5            # tasa de degradación sin intervención
regen_reduction = 2.0     # reducción de degradación con huertos
om_gain_rate = 0.5        # ganancia de materia orgánica con huertos
moisture_gain_rate = 0.4  # ganancia de humedad con huertos
prod_gain_rate = 0.3      # ganancia de productividad con huertos

# Parámetros de eventos extremos
drought_severity = 0.8    # severidad de la sequía (0-1)
flood_severity = 0.7      # severidad de la inundación (0-1)
event_duration = 5        # duración del evento en unidades de tiempo

# Estado inicial (0 = buen suelo, 100 = suelo destruido)
degradation_baseline = np.zeros(T)
degradation_regen = np.zeros(T)
degradation_drought = np.zeros(T)
degradation_drought_regen = np.zeros(T)
degradation_flood = np.zeros(T)
degradation_flood_regen = np.zeros(T)

om_baseline = np.full(T, 5.0)    # % de materia orgánica inicial
om_regen = np.full(T, 5.0)
om_drought = np.full(T, 5.0)
om_drought_regen = np.full(T, 5.0)
om_flood = np.full(T, 5.0)
om_flood_regen = np.full(T, 5.0)

moisture_baseline = np.full(T, 20.0)  # % de humedad inicial
moisture_regen = np.full(T, 20.0)
moisture_drought = np.full(T, 20.0)
moisture_drought_regen = np.full(T, 20.0)
moisture_flood = np.full(T, 20.0)
moisture_flood_regen = np.full(T, 20.0)

prod_baseline = np.full(T, 50.0)      # productividad inicial (índice)
prod_regen = np.full(T, 50.0)
prod_drought = np.full(T, 50.0)
prod_drought_regen = np.full(T, 50.0)
prod_flood = np.full(T, 50.0)
prod_flood_regen = np.full(T, 50.0)

# Simulación
for t in range(1, T):
    # Evento de sequía (entre t=20 y t=25)
    is_drought = 20 <= t < 20 + event_duration
    
    # Evento de inundación (entre t=35 y t=40)
    is_flood = 35 <= t < 35 + event_duration
    
    # Caso base sin intervención
    degradation_baseline[t] = degradation_baseline[t-1] + deg_rate
    om_baseline[t] = max(om_baseline[t-1] - 0.1, 0)
    moisture_baseline[t] = max(moisture_baseline[t-1] - 0.2, 0)
    prod_baseline[t] = max(prod_baseline[t-1] - 0.5, 0)
    
    # Caso base con huertos regenerativos
    degradation_regen[t] = max(degradation_regen[t-1] + deg_rate - regen_reduction, 0)
    om_regen[t] = om_regen[t-1] + om_gain_rate
    moisture_regen[t] = moisture_regen[t-1] + moisture_gain_rate
    prod_regen[t] = prod_regen[t-1] + prod_gain_rate
    
    # Simulación de sequía
    if is_drought:
        # Sin huertos durante sequía
        degradation_drought[t] = degradation_drought[t-1] + deg_rate * (1 + drought_severity)
        om_drought[t] = max(om_drought[t-1] - 0.3, 0)
        moisture_drought[t] = max(moisture_drought[t-1] - 5.0, 0)
        prod_drought[t] = max(prod_drought[t-1] - 2.0, 0)
        
        # Con huertos durante sequía
        degradation_drought_regen[t] = max(degradation_drought_regen[t-1] + deg_rate * (1 + drought_severity/2) - regen_reduction, 0)
        om_drought_regen[t] = max(om_drought_regen[t-1] - 0.1, 0)
        moisture_drought_regen[t] = max(moisture_drought_regen[t-1] - 2.0, 0)
        prod_drought_regen[t] = max(prod_drought_regen[t-1] - 0.8, 0)
    else:
        degradation_drought[t] = degradation_drought[t-1] + deg_rate
        om_drought[t] = max(om_drought[t-1] - 0.1, 0)
        moisture_drought[t] = max(moisture_drought[t-1] - 0.2, 0)
        prod_drought[t] = max(prod_drought[t-1] - 0.5, 0)
        
        degradation_drought_regen[t] = max(degradation_drought_regen[t-1] + deg_rate - regen_reduction, 0)
        om_drought_regen[t] = om_drought_regen[t-1] + om_gain_rate
        moisture_drought_regen[t] = moisture_drought_regen[t-1] + moisture_gain_rate
        prod_drought_regen[t] = prod_drought_regen[t-1] + prod_gain_rate
    
    # Simulación de inundación
    if is_flood:
        # Sin huertos durante inundación
        degradation_flood[t] = degradation_flood[t-1] + deg_rate * (1 + flood_severity)
        om_flood[t] = max(om_flood[t-1] - 0.4, 0)
        moisture_flood[t] = min(moisture_flood[t-1] + 10.0, 100)
        prod_flood[t] = max(prod_flood[t-1] - 3.0, 0)
        
        # Con huertos durante inundación
        degradation_flood_regen[t] = max(degradation_flood_regen[t-1] + deg_rate * (1 + flood_severity/2) - regen_reduction, 0)
        om_flood_regen[t] = max(om_flood_regen[t-1] - 0.2, 0)
        moisture_flood_regen[t] = min(moisture_flood_regen[t-1] + 5.0, 100)
        prod_flood_regen[t] = max(prod_flood_regen[t-1] - 1.5, 0)
    else:
        degradation_flood[t] = degradation_flood[t-1] + deg_rate
        om_flood[t] = max(om_flood[t-1] - 0.1, 0)
        moisture_flood[t] = max(moisture_flood[t-1] - 0.2, 0)
        prod_flood[t] = max(prod_flood[t-1] - 0.5, 0)
        
        degradation_flood_regen[t] = max(degradation_flood_regen[t-1] + deg_rate - regen_reduction, 0)
        om_flood_regen[t] = om_flood_regen[t-1] + om_gain_rate
        moisture_flood_regen[t] = moisture_flood_regen[t-1] + moisture_gain_rate
        prod_flood_regen[t] = prod_flood_regen[t-1] + prod_gain_rate

# Diagnóstico de valores
def print_diagnostic(t, scenario_name, degradation, om, moisture, prod):
    print(f"\nDiagnóstico para {scenario_name} en tiempo {t}:")
    print(f"Degradación: {degradation[t]:.2f}")
    print(f"Materia orgánica: {om[t]:.2f}%")
    print(f"Humedad: {moisture[t]:.2f}%")
    print(f"Productividad: {prod[t]:.2f}")

# Imprimir diagnóstico en momentos clave
key_times = [0, 19, 25, 34, 40, 49]  # Inicio, antes de sequía, después de sequía, antes de inundación, después de inundación, final

for t in key_times:
    print("\n" + "="*50)
    print(f"DIAGNÓSTICO EN TIEMPO {t}")
    print("="*50)
    
    print_diagnostic(t, "Caso base sin huertos", degradation_baseline, om_baseline, moisture_baseline, prod_baseline)
    print_diagnostic(t, "Caso base con huertos", degradation_regen, om_regen, moisture_regen, prod_regen)
    print_diagnostic(t, "Sequía sin huertos", degradation_drought, om_drought, moisture_drought, prod_drought)
    print_diagnostic(t, "Sequía con huertos", degradation_drought_regen, om_drought_regen, moisture_drought_regen, prod_drought_regen)
    print_diagnostic(t, "Inundación sin huertos", degradation_flood, om_flood, moisture_flood, prod_flood)
    print_diagnostic(t, "Inundación con huertos", degradation_flood_regen, om_flood_regen, moisture_flood_regen, prod_flood_regen)

# Gráficas
metrics = [
    ("Nivel de degradación", 
     [degradation_baseline, degradation_regen, degradation_drought, degradation_drought_regen, degradation_flood, degradation_flood_regen],
     ["Caso base sin huertos", "Caso base con huertos", "Sequía sin huertos", "Sequía con huertos", "Inundación sin huertos", "Inundación con huertos"],
     "Unidad"),
    ("Materia orgánica (%)", 
     [om_baseline, om_regen, om_drought, om_drought_regen, om_flood, om_flood_regen],
     ["Caso base sin huertos", "Caso base con huertos", "Sequía sin huertos", "Sequía con huertos", "Inundación sin huertos", "Inundación con huertos"],
     "%"),
    ("Humedad retenida (%)", 
     [moisture_baseline, moisture_regen, moisture_drought, moisture_drought_regen, moisture_flood, moisture_flood_regen],
     ["Caso base sin huertos", "Caso base con huertos", "Sequía sin huertos", "Sequía con huertos", "Inundación sin huertos", "Inundación con huertos"],
     "%"),
    ("Productividad del suelo (índice)", 
     [prod_baseline, prod_regen, prod_drought, prod_drought_regen, prod_flood, prod_flood_regen],
     ["Caso base sin huertos", "Caso base con huertos", "Sequía sin huertos", "Sequía con huertos", "Inundación sin huertos", "Inundación con huertos"],
     "Unidad")
]

# Configuración de colores para mejor visualización
colors = ['#1f77b4', '#2ca02c', '#ff7f0e', '#d62728', '#9467bd', '#8c564b']

for title, data_series, labels, ylabel in metrics:
    plt.figure(figsize=(15, 8))
    for data, label, color in zip(data_series, labels, colors):
        plt.plot(time, data, label=label, color=color)
    plt.title(title)
    plt.xlabel("Tiempo (unidades)")
    plt.ylabel(ylabel)
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.grid(True)
    
    # Marcar períodos de eventos extremos
    plt.axvspan(20, 25, color='red', alpha=0.1, label='Período de sequía')
    plt.axvspan(35, 40, color='blue', alpha=0.1, label='Período de inundación')
    
    plt.tight_layout()
    plt.show()

# Función para simular un escenario con parámetros dados
def simulate_scenario(params, T=50):
    deg_rate, regen_reduction, om_gain_rate, moisture_gain_rate, prod_gain_rate = params
    
    # Inicialización
    degradation = np.zeros(T)
    om = np.full(T, 5.0)
    moisture = np.full(T, 20.0)
    prod = np.full(T, 50.0)
    
    # Simulación
    for t in range(1, T):
        degradation[t] = max(degradation[t-1] + deg_rate - regen_reduction, 0)
        om[t] = max(om[t-1] - 0.1 + om_gain_rate, 0)
        moisture[t] = max(moisture[t-1] - 0.2 + moisture_gain_rate, 0)
        prod[t] = max(prod[t-1] - 0.5 + prod_gain_rate, 0)
    
    return degradation, om, moisture, prod

# Búsqueda de parámetros óptimos usando grid search
def find_optimal_parameters():
    # Rangos de parámetros a probar
    deg_rates = np.linspace(0.1, 3.0, 10)
    regen_reductions = np.linspace(0.1, 5.0, 10)
    om_gains = np.linspace(0.1, 2.0, 10)
    moisture_gains = np.linspace(0.1, 2.0, 10)
    prod_gains = np.linspace(0.1, 2.0, 10)
    
    best_prod = -np.inf
    best_params = None
    
    # Probar combinaciones de parámetros
    for deg in deg_rates:
        for reg in regen_reductions:
            for om in om_gains:
                for moist in moisture_gains:
                    for prod in prod_gains:
                        params = [deg, reg, om, moist, prod]
                        _, _, _, prod_vals = simulate_scenario(params)
                        final_prod = prod_vals[-1]
                        
                        if final_prod > best_prod:
                            best_prod = final_prod
                            best_params = params
    
    return best_params, best_prod

# Encontrar parámetros óptimos
print("\nBuscando parámetros óptimos...")
best_params, best_prod = find_optimal_parameters()

# Imprimir resultados
print("\nResultados de Optimización:")
print("="*50)
print(f"Parámetros óptimos encontrados:")
print(f"Tasa de degradación: {best_params[0]:.3f}")
print(f"Reducción por huertos: {best_params[1]:.3f}")
print(f"Ganancia de materia orgánica: {best_params[2]:.3f}")
print(f"Ganancia de humedad: {best_params[3]:.3f}")
print(f"Ganancia de productividad: {best_params[4]:.3f}")
print(f"\nProductividad final alcanzada: {best_prod:.2f}")

# Simular con parámetros óptimos
degradation_opt, om_opt, moisture_opt, prod_opt = simulate_scenario(best_params)

# Gráfica comparativa de productividad
plt.figure(figsize=(12, 6))
plt.plot(time, prod_baseline, label='Sin intervención', color='red')
plt.plot(time, prod_regen, label='Con huertos (parámetros actuales)', color='blue')
plt.plot(time, prod_opt, label='Con huertos (parámetros óptimos)', color='green', linestyle='--')
plt.title('Comparación de Productividad')
plt.xlabel('Tiempo (unidades)')
plt.ylabel('Productividad (índice)')
plt.legend()
plt.grid(True)
plt.show()

# Análisis de sensibilidad
print("\nAnálisis de Sensibilidad:")
print("="*50)
print("Efecto de cambios en cada parámetro sobre la productividad final:")

# Variación de ±20% en cada parámetro
variation = 0.2
param_names = ['Tasa de degradación', 'Reducción por huertos', 
               'Ganancia de materia orgánica', 'Ganancia de humedad', 
               'Ganancia de productividad']

for i, param_name in enumerate(param_names):
    params_plus = best_params.copy()
    params_minus = best_params.copy()
    
    params_plus[i] *= (1 + variation)
    params_minus[i] *= (1 - variation)
    
    _, _, _, prod_plus = simulate_scenario(params_plus)
    _, _, _, prod_minus = simulate_scenario(params_minus)
    
    print(f"\n{param_name}:")
    print(f"  +20%: {prod_plus[-1]:.2f}")
    print(f"  -20%: {prod_minus[-1]:.2f}")
    print(f"  Sensibilidad: {abs(prod_plus[-1] - prod_minus[-1]):.2f}")

class SoilEnvironment:
    def __init__(self, size=10):
        self.size = size
        self.reset()
        
    def reset(self):
        # Estado inicial del suelo (matriz de size x size)
        self.soil_health = np.full((self.size, self.size), 50.0)  # 50% salud inicial
        self.moisture = np.full((self.size, self.size), 20.0)     # 20% humedad inicial
        self.organic_matter = np.full((self.size, self.size), 5.0) # 5% materia orgánica
        self.gardens = np.zeros((self.size, self.size))           # 0 = sin huerto, 1 = con huerto
        self.time = 0
        return self.get_state()
    
    def get_state(self):
        # Combinar todos los estados en una matriz
        return np.stack([self.soil_health, self.moisture, self.organic_matter, self.gardens])
    
    def step(self, action):
        # action es una tupla (x, y) indicando dónde colocar/quitar un huerto
        x, y = action
        reward = 0
        done = False
        
        # Aplicar la acción (toggle garden)
        self.gardens[x, y] = 1 - self.gardens[x, y]
        
        # Actualizar estado del suelo
        for i in range(self.size):
            for j in range(self.size):
                # Degradación natural
                self.soil_health[i, j] = max(self.soil_health[i, j] - 0.5, 0)
                self.moisture[i, j] = max(self.moisture[i, j] - 0.2, 0)
                self.organic_matter[i, j] = max(self.organic_matter[i, j] - 0.1, 0)
                
                # Efectos de los huertos
                if self.gardens[i, j] == 1:
                    self.soil_health[i, j] = min(self.soil_health[i, j] + 0.3, 100)
                    self.moisture[i, j] = min(self.moisture[i, j] + 0.4, 100)
                    self.organic_matter[i, j] = min(self.organic_matter[i, j] + 0.5, 100)
        
        # Calcular recompensa
        reward = np.mean(self.soil_health) - 50  # Recompensa basada en la salud promedio
        
        # Eventos aleatorios
        if np.random.random() < 0.1:  # 10% de probabilidad de sequía
            self.moisture = np.maximum(self.moisture - 5, 0)
            reward -= 10
        elif np.random.random() < 0.1:  # 10% de probabilidad de inundación
            self.moisture = np.minimum(self.moisture + 10, 100)
            reward -= 5
        
        self.time += 1
        if self.time >= 50:  # Episodio termina después de 50 pasos
            done = True
        
        return self.get_state(), reward, done

class QLearningAgent:
    def __init__(self, state_size, action_size, learning_rate=0.1, discount_factor=0.95, exploration_rate=1.0):
        self.state_size = state_size
        self.action_size = action_size
        self.learning_rate = learning_rate
        self.discount_factor = discount_factor
        self.exploration_rate = exploration_rate
        self.q_table = {}
        
    def get_state_key(self, state):
        # Discretizar el estado para usarlo como clave en la tabla Q
        return tuple(np.round(state.flatten(), 1))
    
    def get_action(self, state):
        state_key = self.get_state_key(state)
        
        # Exploración vs explotación
        if np.random.random() < self.exploration_rate:
            return tuple(np.random.randint(0, 10, size=2))  # Acción aleatoria
        
        # Obtener la mejor acción conocida
        if state_key in self.q_table:
            return max(self.q_table[state_key].items(), key=lambda x: x[1])[0]
        return tuple(np.random.randint(0, 10, size=2))
    
    def update(self, state, action, reward, next_state):
        state_key = self.get_state_key(state)
        next_state_key = self.get_state_key(next_state)
        
        # Inicializar Q-values si no existen
        if state_key not in self.q_table:
            self.q_table[state_key] = {}
        if action not in self.q_table[state_key]:
            self.q_table[state_key][action] = 0
        
        # Actualizar Q-value
        old_value = self.q_table[state_key][action]
        next_max = max(self.q_table.get(next_state_key, {}).values()) if next_state_key in self.q_table else 0
        new_value = (1 - self.learning_rate) * old_value + self.learning_rate * (reward + self.discount_factor * next_max)
        self.q_table[state_key][action] = new_value

# Entrenamiento
env = SoilEnvironment()
agent = QLearningAgent(state_size=4, action_size=100)  # 4 estados, 100 acciones posibles (10x10)

episodes = 1000
rewards_history = []
best_reward = -np.inf
best_garden_config = None

for episode in range(episodes):
    state = env.reset()
    total_reward = 0
    done = False
    
    while not done:
        action = agent.get_action(state)
        next_state, reward, done = env.step(action)
        agent.update(state, action, reward, next_state)
        state = next_state
        total_reward += reward
    
    # Guardar la mejor configuración
    if total_reward > best_reward:
        best_reward = total_reward
        best_garden_config = env.gardens.copy()
    
    rewards_history.append(total_reward)
    
    # Reducir la tasa de exploración
    agent.exploration_rate = max(0.01, agent.exploration_rate * 0.995)
    
    if episode % 100 == 0:
        print(f"Episodio {episode}, Recompensa: {total_reward:.2f}, Tasa de exploración: {agent.exploration_rate:.2f}")

# Visualización de resultados
plt.figure(figsize=(15, 5))

# Gráfica de recompensas
plt.subplot(1, 2, 1)
plt.plot(rewards_history)
plt.title('Historial de Recompensas')
plt.xlabel('Episodio')
plt.ylabel('Recompensa Total')

# Visualización de la mejor configuración de huertos
plt.subplot(1, 2, 2)
plt.imshow(best_garden_config, cmap='Greens')
plt.title('Mejor Configuración de Huertos')
plt.colorbar(label='Presencia de Huerto')

plt.tight_layout()
plt.show()

# Análisis de la mejor configuración
print("\nAnálisis de la Mejor Configuración:")
print("="*50)
print(f"Recompensa total: {best_reward:.2f}")
print(f"Número de huertos: {np.sum(best_garden_config)}")
print(f"Porcentaje de área con huertos: {(np.sum(best_garden_config) / 100) * 100:.1f}%")

# Simular el efecto de la mejor configuración
env.reset()
env.gardens = best_garden_config
state = env.get_state()
total_reward = 0
rewards_over_time = []

for _ in range(50):  # Simular 50 pasos de tiempo
    _, reward, _ = env.step((0, 0))  # La acción no importa porque ya tenemos la configuración óptima
    total_reward += reward
    rewards_over_time.append(reward)

plt.figure(figsize=(10, 5))
plt.plot(rewards_over_time)
plt.title('Evolución de la Recompensa con la Mejor Configuración')
plt.xlabel('Tiempo')
plt.ylabel('Recompensa')
plt.grid(True)
plt.show()
